public abstract class Password 
{
	private char[] pass; //stores the password generated by the generatePass() method. 
	//All comparisons done within this class.

	public Password()
	{
		pass = generatePass(); //this will tell the compiler to look for a implementation in some subclass
	}
  
	public abstract char[] generatePass(); //each subclass should override this
	public abstract boolean guess(); //each subclass should override this
	
	public char[] compare(char[] pass2) //returns a char[] of the password with - where there is a wrong guess and the correct output for a right guess
	{
		char[] wrongPlaces = new char[pass.length];
		char[] tempPass = new char[pass.length]; //used for comparisons so that you dont modify password value
		System.arraycopy(pass, 0, tempPass, 0, pass.length );
		for(int i = 0; i<pass.length; i++) 
		{
			if(tempPass[i] != pass2[i])
			{
				if(String.valueOf(tempPass).contains(String.valueOf(pass2[i])))
				{
					wrongPlaces[i] = (char) (String.valueOf(tempPass).indexOf(String.valueOf(pass2[i]))+'0');
					tempPass[i] = '*'; //filler character, so that contains will move to next instance of letter
				}
				else
				{
					wrongPlaces[i] = '-';
				}
			}
			else
				wrongPlaces[i] = pass[i];
		}
		return wrongPlaces;
	}
	
	protected char[] getPass()
	{
		return pass;
	}
}
